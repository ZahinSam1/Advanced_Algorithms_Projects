# import matplotlib.pyplot as plt

# def plot_activity_durations(start, finish):
#     intervals = [(start[i], finish[i]) for i in range(len(start))]
#     intervals.sort(key=lambda x: x[0])  # Sort intervals based on start time

#     durations = [interval[1] - interval[0] for interval in intervals]

#     # Plotting the durations
#     plt.bar(range(len(durations)), durations)
#     plt.xlabel("Activity Index")
#     plt.ylabel("Duration")
#     plt.title("Activity Durations")
#     plt.show()

# # Example usage
# start = [1, 3, 2, 0, 5, 8, 11]
# finish = [3, 4, 5, 7, 9, 10, 12]

# plot_activity_durations(start, finish)

# To find the shortest to longest time between the start and finish times of all the activities and arrange them, 
# you can use a greedy algorithm known as "Earliest Finish Time" algorithm. Here's how it can be implemented:
# Create a list of tuples, where each tuple contains the activity index, start time, and finish time.
# Sort the list of tuples based on the finish time in ascending order. 
# This step ensures that activities with earlier finish times come first.
# Iterate through the sorted list and extract the activity indices in order. 
# This will give you the activities arranged from the shortest to the longest time between their start and finish times.


def arrange_activities(start, finish):
    # Create a list of tuples (activity index, start time, finish time)
    activities = [(i, start[i], finish[i]) for i in range(len(start))]

    # Sort the activities based on finish time in ascending order
    activities.sort(key=lambda x: x[2])

    # Extract the activity indices in order
    arranged_activities = [activity[0] for activity in activities]

    return arranged_activities

# Example usage
start = [1, 3, 2, 0, 5, 8, 11]
finish = [3, 4, 5, 7, 9, 10, 12]
arranged = arrange_activities(start, finish)
print("Arranged activities:", arranged)
