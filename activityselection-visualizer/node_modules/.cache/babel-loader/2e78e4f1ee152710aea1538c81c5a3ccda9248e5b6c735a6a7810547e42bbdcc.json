{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shanila\\\\CSE\\\\cse373\\\\Advanced_Algorithms_Projects\\\\activityselection-visualizer\\\\src\\\\shanila\\\\main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction mergeSort(arr) {\n  if (arr.length <= 1) {\n    return Promise.resolve(arr);\n  }\n  const mid = Math.floor(arr.length / 2);\n  const leftHalf = arr.slice(0, mid);\n  const rightHalf = arr.slice(mid);\n  return Promise.all([mergeSort(leftHalf), mergeSort(rightHalf)]).then(_ref => {\n    let [leftSorted, rightSorted] = _ref;\n    return merge(leftSorted, rightSorted);\n  });\n}\nfunction merge(left, right) {\n  const merged = [];\n  let leftIndex = 0;\n  let rightIndex = 0;\n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex][2] <= right[rightIndex][2]) {\n      // Comparing finish times\n      merged.push(left[leftIndex]);\n      leftIndex++;\n    } else {\n      merged.push(right[rightIndex]);\n      rightIndex++;\n    }\n  }\n  return merged.concat(left.slice(leftIndex), right.slice(rightIndex));\n}\nfunction activitySelection(arr) {\n  return mergeSort(arr).then(sortedActivities => {\n    const selectedActivities = [sortedActivities[0]];\n    let prevFinishTime = sortedActivities[0][2];\n    for (let i = 1; i < sortedActivities.length; i++) {\n      const activity = sortedActivities[i];\n      if (activity[1] >= prevFinishTime) {\n        selectedActivities.push(activity);\n        prevFinishTime = activity[2];\n      }\n    }\n    return selectedActivities;\n  });\n}\nfunction generateRandomActivityList(size) {\n  const activityPrefix = 'activity';\n  const activityList = [];\n  for (let i = 1; i <= size; i++) {\n    const activityName = `${activityPrefix} ${i}`;\n    const startTime = Math.floor(Math.random() * 101);\n    const finishTime = Math.floor(Math.random() * (101 - startTime + 1)) + startTime;\n    const activity = [activityName, startTime, finishTime];\n    activityList.push(activity);\n  }\n  return activityList;\n}\nconst ActivitySelectionVisualization = () => {\n  _s();\n  const [activityList, setActivityList] = useState([]);\n  const [selectedActivities, setSelectedActivities] = useState([]);\n  const [visualizationIndex, setVisualizationIndex] = useState(0);\n  const [activityPositions, setActivityPositions] = useState([]);\n  useEffect(() => {\n    // Generate random activity list\n    const generatedActivityList = generateRandomActivityList(10);\n    setActivityList(generatedActivityList);\n\n    // Perform activity selection with animation\n    const performActivitySelection = async activities => {\n      const sortedActivities = await activitySelection(activities);\n      setSelectedActivities([]);\n      setVisualizationIndex(0);\n      setActivityPositions(activities.map((_, index) => index * 60));\n      const animateSorting = async (activities, index) => {\n        if (index >= activities.length) {\n          setSelectedActivities(activities);\n          return;\n        }\n        setVisualizationIndex(index);\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for visualization purposes (1 second interval)\n\n        const nextIndex = index + 1;\n        setSelectedActivities(activities.slice(0, nextIndex));\n        const newActivityPositions = activities.map((_, i) => {\n          if (i <= index) return i * 60;\n          if (i === nextIndex) return index * 60;\n          return i * 60 + 60;\n        });\n        setActivityPositions(newActivityPositions);\n        animateSorting(activities, nextIndex);\n      };\n      animateSorting(sortedActivities, 0);\n    };\n    performActivitySelection(generatedActivityList);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Activity Selection Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: activityList.map((activity, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: selectedActivities.includes(activity) ? 'green' : 'gray',\n          width: '50px',\n          height: `${activity[2] * 2}px`,\n          margin: '2px',\n          display: 'inline-block',\n          transform: `translateX(${activityPositions[index]}px)`,\n          transition: 'transform 1s ease-in-out'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ActivitySelectionVisualization, \"qQyYoHyPUNvcT1thx/EptD9CHsY=\");\n_c = ActivitySelectionVisualization;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Activity Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActivitySelectionVisualization, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Main;\nexport default Main;\nvar _c, _c2;\n$RefreshReg$(_c, \"ActivitySelectionVisualization\");\n$RefreshReg$(_c2, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","mergeSort","arr","length","Promise","resolve","mid","Math","floor","leftHalf","slice","rightHalf","all","then","_ref","leftSorted","rightSorted","merge","left","right","merged","leftIndex","rightIndex","push","concat","activitySelection","sortedActivities","selectedActivities","prevFinishTime","i","activity","generateRandomActivityList","size","activityPrefix","activityList","activityName","startTime","random","finishTime","ActivitySelectionVisualization","_s","setActivityList","setSelectedActivities","visualizationIndex","setVisualizationIndex","activityPositions","setActivityPositions","generatedActivityList","performActivitySelection","activities","map","_","index","animateSorting","setTimeout","nextIndex","newActivityPositions","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","backgroundColor","includes","width","height","margin","transform","transition","_c","Main","_c2","$RefreshReg$"],"sources":["C:/Shanila/CSE/cse373/Advanced_Algorithms_Projects/activityselection-visualizer/src/shanila/main.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction mergeSort(arr) {\r\n  if (arr.length <= 1) {\r\n    return Promise.resolve(arr);\r\n  }\r\n\r\n  const mid = Math.floor(arr.length / 2);\r\n  const leftHalf = arr.slice(0, mid);\r\n  const rightHalf = arr.slice(mid);\r\n\r\n  return Promise.all([mergeSort(leftHalf), mergeSort(rightHalf)]).then(([leftSorted, rightSorted]) => {\r\n    return merge(leftSorted, rightSorted);\r\n  });\r\n}\r\n\r\nfunction merge(left, right) {\r\n  const merged = [];\r\n  let leftIndex = 0;\r\n  let rightIndex = 0;\r\n\r\n  while (leftIndex < left.length && rightIndex < right.length) {\r\n    if (left[leftIndex][2] <= right[rightIndex][2]) { // Comparing finish times\r\n      merged.push(left[leftIndex]);\r\n      leftIndex++;\r\n    } else {\r\n      merged.push(right[rightIndex]);\r\n      rightIndex++;\r\n    }\r\n  }\r\n\r\n  return merged.concat(left.slice(leftIndex), right.slice(rightIndex));\r\n}\r\n\r\nfunction activitySelection(arr) {\r\n  return mergeSort(arr).then(sortedActivities => {\r\n    const selectedActivities = [sortedActivities[0]];\r\n    let prevFinishTime = sortedActivities[0][2];\r\n\r\n    for (let i = 1; i < sortedActivities.length; i++) {\r\n      const activity = sortedActivities[i];\r\n      if (activity[1] >= prevFinishTime) {\r\n        selectedActivities.push(activity);\r\n        prevFinishTime = activity[2];\r\n      }\r\n    }\r\n\r\n    return selectedActivities;\r\n  });\r\n}\r\n\r\nfunction generateRandomActivityList(size) {\r\n  const activityPrefix = 'activity';\r\n  const activityList = [];\r\n\r\n  for (let i = 1; i <= size; i++) {\r\n    const activityName = `${activityPrefix} ${i}`;\r\n    const startTime = Math.floor(Math.random() * 101);\r\n    const finishTime = Math.floor(Math.random() * (101 - startTime + 1)) + startTime;\r\n    const activity = [activityName, startTime, finishTime];\r\n    activityList.push(activity);\r\n  }\r\n\r\n  return activityList;\r\n}\r\n\r\nconst ActivitySelectionVisualization = () => {\r\n  const [activityList, setActivityList] = useState([]);\r\n  const [selectedActivities, setSelectedActivities] = useState([]);\r\n  const [visualizationIndex, setVisualizationIndex] = useState(0);\r\n  const [activityPositions, setActivityPositions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Generate random activity list\r\n    const generatedActivityList = generateRandomActivityList(10);\r\n    setActivityList(generatedActivityList);\r\n\r\n    // Perform activity selection with animation\r\n    const performActivitySelection = async (activities) => {\r\n      const sortedActivities = await activitySelection(activities);\r\n      setSelectedActivities([]);\r\n      setVisualizationIndex(0);\r\n      setActivityPositions(activities.map((_, index) => index * 60));\r\n\r\n      const animateSorting = async (activities, index) => {\r\n        if (index >= activities.length) {\r\n          setSelectedActivities(activities);\r\n          return;\r\n        }\r\n\r\n        setVisualizationIndex(index);\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for visualization purposes (1 second interval)\r\n\r\n        const nextIndex = index + 1;\r\n        setSelectedActivities(activities.slice(0, nextIndex));\r\n\r\n        const newActivityPositions = activities.map((_, i) => {\r\n          if (i <= index) return i * 60;\r\n          if (i === nextIndex) return index * 60;\r\n          return i * 60 + 60;\r\n        });\r\n\r\n        setActivityPositions(newActivityPositions);\r\n\r\n        animateSorting(activities, nextIndex);\r\n      };\r\n\r\n      animateSorting(sortedActivities, 0);\r\n    };\r\n\r\n    performActivitySelection(generatedActivityList);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Activity Selection Visualization</h2>\r\n      <div style={{ display: 'flex' }}>\r\n        {activityList.map((activity, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              backgroundColor: selectedActivities.includes(activity) ? 'green' : 'gray',\r\n              width: '50px',\r\n              height: `${activity[2] * 2}px`,\r\n              margin: '2px',\r\n              display: 'inline-block',\r\n              transform: `translateX(${activityPositions[index]}px)`,\r\n              transition: 'transform 1s ease-in-out',\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div>\r\n      <h1>Activity Selection</h1>\r\n      <ActivitySelectionVisualization />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}